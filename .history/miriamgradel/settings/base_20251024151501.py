"""
Django settings for miriamgradel project.
Generated by 'django-admin startproject' using Django 5.2.4.
"""

from __future__ import annotations
import os
from pathlib import Path

# -------------------------------------------------------------------
# Paths
# -------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parents[2]    # repo root
PROJECT_DIR = Path(__file__).resolve().parents[1] # settings/.. (project package)

# -------------------------------------------------------------------
# Core flags / env
# -------------------------------------------------------------------
DEBUG = os.getenv("DEBUG", "True").lower() in {"1", "true", "yes"}
SECRET_KEY = os.getenv("SECRET_KEY", "change-me-in-prod")
ALLOWED_HOSTS = [
    h.strip()
    for h in os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")
    if h.strip()
]

# Optional WhiteNoise availability check (so dev won't crash if not installed yet)
try:
    import whitenoise  # noqa: F401
    _HAS_WHITENOISE = True
except Exception:
    _HAS_WHITENOISE = False

# -------------------------------------------------------------------
# Applications
# -------------------------------------------------------------------
INSTALLED_APPS = [
    # Project apps
    "home",
    "search",
    "communication",
    "journalism",
    "behind_scenes",
    "work_with_me",

    # Wagtail
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.contrib.sitemaps",   # sitemap support
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "wagtail.embeds",

    # Third-party
    "modelcluster",
    "taggit",
    "django_filters",

    # Django
    "django.contrib.admin",
    "django.contrib.sitemaps",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# -------------------------------------------------------------------
# Middleware (order matters)
# -------------------------------------------------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",

    # Use WhiteNoise if available (gzip/brotli + cache busting for static)
    *(
        ["whitenoise.middleware.WhiteNoiseMiddleware"]
        if _HAS_WHITENOISE
        else []
    ),

    "django.contrib.sessions.middleware.SessionMiddleware",

    # Locale middleware must be after Session and before Common
    "django.middleware.locale.LocaleMiddleware",

    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    # Wagtail redirects near the end
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
]

ROOT_URLCONF = "miriamgradel.urls"
WSGI_APPLICATION = "miriamgradel.wsgi.application"

# -------------------------------------------------------------------
# Templates
# -------------------------------------------------------------------
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [str(PROJECT_DIR / "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# -------------------------------------------------------------------
# Database
# -------------------------------------------------------------------
DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE", "django.db.backends.postgresql"),
        "NAME": os.getenv("DB_NAME", "miriamg"),
        "USER": os.getenv("DB_USER", "lilla"),
        "PASSWORD": os.getenv("DB_PASSWORD", ""),
        "HOST": os.getenv("DB_HOST", "localhost"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
}

# --- Heroku/Postgres via DATABASE_URL ---
if db_url := os.getenv("DATABASE_URL"):
    # Requires dj-database-url in requirements
    import dj_database_url
    DATABASES["default"] = dj_database_url.config(
        default=db_url,
        conn_max_age=600,
        ssl_require=True,
    )

# -------------------------------------------------------------------
# Password validation
# -------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# -------------------------------------------------------------------
# Internationalization / i18n (Wagtail-ready)
# -------------------------------------------------------------------
LANGUAGE_CODE = "en"  # plain "en" works best with Wagtail locales
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

LANGUAGES = [
    ("en", "English"),
    ("da", "Dansk"),
    ("ja", "日本語"),
]

WAGTAIL_CONTENT_LANGUAGES = LANGUAGES
WAGTAIL_I18N_ENABLED = True
LOCALE_PATHS = [str(BASE_DIR / "locale")]

# -------------------------------------------------------------------
# Static & Media files
# -------------------------------------------------------------------
STATIC_URL = "/static/"
STATIC_ROOT = str(BASE_DIR / "staticfiles")  # collectstatic target

STATICFILES_DIRS = [str(PROJECT_DIR / "static")]  # project assets

MEDIA_URL = "/media/"
MEDIA_ROOT = str(BASE_DIR / "media")

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Django 5 STORAGES API
STORAGES = {
    "default": {"BACKEND": "django.core.files.storage.FileSystemStorage"},
    "staticfiles": {
        "BACKEND": (
            "whitenoise.storage.CompressedManifestStaticFilesStorage"
            if (not DEBUG and _HAS_WHITENOISE)
            else "django.contrib.staticfiles.storage.StaticFilesStorage"
        )
    },
}

# --- Media on Cloudinary (keep static on WhiteNoise) ---
if os.getenv("CLOUDINARY_URL") or os.getenv("CLOUDINARY_CLOUD_NAME"):
    INSTALLED_APPS += ["cloudinary", "cloudinary_storage"]
    # Use Cloudinary only for MEDIA files
    STORAGES["default"] = {
        "BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage"
    }
    # Helpful defaults: stable URLs and HTTPS
    CLOUDINARY_STORAGE = {
        "SECURE": True,
        "UNIQUE_FILENAME": False,  # keep original filenames/paths
        "OVERWRITE": True,         # replace if same path is uploaded again
    }

# WhiteNoise: cache headers for fingerprinted files (used if installed)
WHITENOISE_MAX_AGE = 60 * 60 * 24 * 365  # 1 year

# -------------------------------------------------------------------
# Caching (simple local cache; upgrade to Redis in prod if needed)
# -------------------------------------------------------------------
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "miriamgradel-site",
    }
}

# -------------------------------------------------------------------
# Wagtail
# -------------------------------------------------------------------
WAGTAIL_SITE_NAME = "miriamgradel"

WAGTAILSEARCH_BACKENDS = {
    "default": {"BACKEND": "wagtail.search.backends.database"},
}

WAGTAILADMIN_BASE_URL = os.getenv("WAGTAILADMIN_BASE_URL", "http://localhost:8000")

WAGTAILDOCS_EXTENSIONS = [
    "csv",
    "docx",
    "key",
    "odt",
    "pdf",
    "pptx",
    "rtf",
    "txt",
    "xlsx",
    "zip",
]

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10_000

# -------------------------------------------------------------------
# Email / contact form notifications
# -------------------------------------------------------------------
# Uses one.com SMTP.
# Your screenshot shows:
#   SMTP server: send.one.com
#   SMTP port:   465 (SSL)
# We'll read creds from env so you don't hardcode the mailbox password.

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

EMAIL_HOST = os.getenv("EMAIL_HOST", "send.one.com")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "465"))

# Port 465 = implicit SSL, not STARTTLS.
EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", "True").lower() in {"1", "true", "yes"}
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "False").lower() in {"1", "true", "yes"}

EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "contact@miriamgradel.cc")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")

DEFAULT_FROM_EMAIL = os.getenv(
    "DEFAULT_FROM_EMAIL",
    EMAIL_HOST_USER or "webform@localhost"
)
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# -------------------------------------------------------------------
# Security (tighten automatically when DEBUG=False)
# -------------------------------------------------------------------
if os.getenv("BEHIND_PROXY"):
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = int(os.getenv("SECURE_HSTS_SECONDS", "31536000"))  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_SSL_REDIRECT = os.getenv("SECURE_SSL_REDIRECT", "True").lower() in {
        "1",
        "true",
        "yes",
    }
    X_FRAME_OPTIONS = "DENY"
    CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS", "").split()  # space-separated
    SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

# Behind Heroku's router (proxy)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
