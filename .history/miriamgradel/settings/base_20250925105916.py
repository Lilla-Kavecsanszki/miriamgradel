"""
Django settings for miriamgradel project.
Generated by 'django-admin startproject' using Django 5.2.4.
"""

from __future__ import annotations
import os
from pathlib import Path

# -------------------------------------------------------------------
# Paths
# -------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parents[2]   # repo root
PROJECT_DIR = Path(__file__).resolve().parents[1]  # settings/.. (project package)

# -------------------------------------------------------------------
# Core flags / env
# -------------------------------------------------------------------
DEBUG = os.getenv("DEBUG", "True").lower() in {"1", "true", "yes"}
SECRET_KEY = os.getenv("SECRET_KEY", "change-me-in-prod")
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")

# -------------------------------------------------------------------
# Applications
# -------------------------------------------------------------------
INSTALLED_APPS = [
    # Project apps
    "home",
    "search",
    "communication",
    "journalism",
    "behind_scenes",
    "work_with_me",

    # Wagtail
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.contrib.sitemaps",       # <— sitemap support
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "wagtail.embeds",

    # Third-party
    "modelcluster",
    "taggit",
    "django_filters",

    # Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# -------------------------------------------------------------------
# Middleware (order matters)
# -------------------------------------------------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",

    # Static files (gzip + brotli + cache busting)
    "whitenoise.middleware.WhiteNoiseMiddleware",

    "django.contrib.sessions.middleware.SessionMiddleware",

    # Locale middleware must be after Session and before Common
    "django.middleware.locale.LocaleMiddleware",

    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    # Wagtail redirects near the end
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
]

ROOT_URLCONF = "miriamgradel.urls"
WSGI_APPLICATION = "miriamgradel.wsgi.application"

# -------------------------------------------------------------------
# Templates
# -------------------------------------------------------------------
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [ str(PROJECT_DIR / "templates") ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# -------------------------------------------------------------------
# Database
# -------------------------------------------------------------------
DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE", "django.db.backends.postgresql"),
        "NAME": os.getenv("DB_NAME", "miriamg"),
        "USER": os.getenv("DB_USER", "lilla"),
        "PASSWORD": os.getenv("DB_PASSWORD", ""),
        "HOST": os.getenv("DB_HOST", "localhost"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
}

# -------------------------------------------------------------------
# Password validation
# -------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# -------------------------------------------------------------------
# Internationalization / i18n (Wagtail-ready)
# -------------------------------------------------------------------
# Use plain "en" for Wagtail’s locale system (instead of "en-us")
LANGUAGE_CODE = "en"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Languages we’ll support; DA + JA will appear once you add translations
LANGUAGES = [
    ("en", "English"),
    ("da", "Dansk"),
    ("ja", "日本語"),
]

# Optional: restrict the languages shown in Wagtail admin chooser
WAGTAIL_CONTENT_LANGUAGES = LANGUAGES

# Enable Wagtail’s i18n features
WAGTAIL_I18N_ENABLED = True

# Path for django.po / .mo files
LOCALE_PATHS = [ str(BASE_DIR / "locale") ]

# -------------------------------------------------------------------
# Static & Media files
# -------------------------------------------------------------------
STATIC_URL = "/static/"
STATIC_ROOT = str(BASE_DIR / "static")                 # collectstatic target
STATICFILES_DIRS = [ str(PROJECT_DIR / "static") ]     # your app assets

MEDIA_URL = "/media/"
MEDIA_ROOT = str(BASE_DIR / "media")

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Django 5 STORAGES API
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    # Use WhiteNoise’s compressed manifest storage in prod
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"
        if not DEBUG
        else "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# WhiteNoise: cache headers for fingerprinted files
WHITENOISE_MAX_AGE = 60 * 60 * 24 * 365  # 1 year

# -------------------------------------------------------------------
# Caching (simple local cache; can swap for Redis in prod)
# -------------------------------------------------------------------
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "miriamgradel-site",
    }
}

# -------------------------------------------------------------------
# Wagtail
# -------------------------------------------------------------------
WAGTAIL_SITE_NAME = "miriamgradel"

# Search (DB backend is fine to start)
WAGTAILSEARCH_BACKENDS = {
    "default": {"BACKEND": "wagtail.search.backends.database"},
}

# Use env in production (used in absolute URLs in emails, etc.)
WAGTAILADMIN_BASE_URL = os.getenv("WAGTAILADMIN_BASE_URL", "http://localhost:8000")

# Allowed document extensions
WAGTAILDOCS_EXTENSIONS = [
    "csv", "docx", "key", "odt", "pdf", "pptx", "rtf", "txt", "xlsx", "zip"
]

# Editor form field limit
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10_000

# -------------------------------------------------------------------
# Security (safe defaults; tighten when DEBUG=False)
# -------------------------------------------------------------------
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https") if os.getenv("BEHIND_PROXY") else None

if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = int(os.getenv("SECURE_HSTS_SECONDS", "31536000"))  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_SSL_REDIRECT = os.getenv("SECURE_SSL_REDIRECT", "True").lower() in {"1", "true", "yes"}
    X_FRAME_OPTIONS = "DENY"
    CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS", "").split()  # space-separated
    REFERRER_POLICY = "strict-origin-when-cross-origin"
